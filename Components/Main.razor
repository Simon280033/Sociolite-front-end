@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using Sociolite.Data
@using Sociolite.Models
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager
@inject IDAO DAO
@inject ISessionContext SessionContext

@if(isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
		<FluentProgressRing/>
	</div>
}
else
{
    <div class="welcome page">
        <div class="narrow">
            <div class="center" style="display: flex; flex-wrap: wrap; align-items: center; justify-content: center;">
                <h1>Sociolite</h1>
                <img height="50px" width="50px" src="socioliteLogo.png" />
            </div>
        </div>
    </div>
    <div class="center">
        For development purposes, click here to add or remove dummy team(s) to/from user:
        <button @onclick="AddTeam">Add team</button>
        <button @onclick="RemoveTeams">Remove teams</button>
    </div>
    <div>Teams: @SessionContext.GetTeams().Count()</div>
    <br />
    @if (SessionContext.GetTeams().Any())
    {
        // If joined atleast 1 team
        <TeamsOverview></TeamsOverview>
    } else {
        // If not joined any teams
        <JoinTeamGuide></JoinTeamGuide>
    }
}

@code {
    string userName;
    string errorMessage;
    string contactsString;
    bool isInTeams;
    bool isLoading = true; 

    protected void AddTeam()
    {
        List<string> ids = new List<string>();

        if (SessionContext.GetTeams().Count() % 2 == 0)
        {
            ids.Add(userName);
        }
        SessionContext.AddTeam(new SocioliteTeam
            {
                Id = ("" + SessionContext.GetTeams().Count()),
                Name = "Team " + SessionContext.GetTeams().Count(),
                Members = new List<TeamsUser>(),
                RecurranceString = "*/5 * * * * *",
                Discussions = new List<SocioliteDiscussion>(),
                Polls = new List<SociolitePoll>(),
                SchedulerIds = ids
            });
    }

    protected void RemoveTeams()
    {
        SessionContext.ClearTeams();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            isInTeams = await MicrosoftTeams.IsInTeams();

            if (isInTeams)
            { 
                var user = await teamsUserCredential.GetUserInfoAsync();
                userName = user.DisplayName;
            }
            else
            {
                errorMessage = "Not running in Microsoft Teams.";
            }

            isLoading = false;
            StateHasChanged();            
        }
    }
}

