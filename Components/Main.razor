@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using Sociolite.Data
@using Sociolite.Models
@using Microsoft.Graph
@using System.Text
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager
@inject IDAO DAO
@inject ISessionContext SessionContext

@if(isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
		<FluentProgressRing/>
	</div>
}
else
{
    <div style="background: rgb(231,231,231);
background: linear-gradient(0deg, rgba(231,231,231,1) 0%, rgba(240,240,240,1) 5%, rgba(255,255,255,1) 23%, rgba(255,255,255,1) 90%);">
    <div class="welcome page">
        <div class="narrow">
            <div class="center" style="display: flex; flex-wrap: wrap; align-items: center; justify-content: center;">
                <h1 style="padding-right: 15px; color: dimgray; font-size: 60px;">Sociolite</h1>
                <img height="75px" width="75px" src="socioliteLogo.png" />
            </div>
        </div>
    </div>
    <div class="center">
        For development purposes, click here to add or remove dummy team(s) to/from user:
        <button @onclick="AddTeam">Add team</button>
        <button @onclick="RemoveTeams">Remove teams</button>

            <div>Teams: @SessionContext.GetTeams().Count()</div>
            <div>Window: @SessionContext.GetWindow()</div>

        <div>
                <button class="teamsTabButton" @onclick=" GoToTeams">
                <img style="float: left;" height="40px" width="40px" src="socioliteTeamsIcon.png" />
                    <span>Teams</span>
            </button>
            <button class="activitiesTabButton" @onclick="GoToActivities">
                <img style="float: left;" height="40px" width="40px" src="socioliteActivitiesIcon.png" />
                    <span>Activities</span>
            </button>
        </div>
    </div>
    </div>
    <div>@members</div>
    @if (String.Equals(SessionContext.GetWindow(), "teams"))
    {
        // If joined atleast 1 team
        <TeamsOverview></TeamsOverview>
    } else {
        // If not joined any teams
        <ActivitiesOverview></ActivitiesOverview>
    }
}

@code {
    string userName;
    string errorMessage;
    string contactsString;
    bool isInTeams;
    bool isLoading = true;

    string members;

    protected void AddTeam()
    {
        List<string> managerIds = new List<string>();
        List<string> schedulerIds = new List<string>();

        if (SessionContext.GetTeams().Count() % 2 == 0)
        {
            managerIds.Add(userName);
        } else {
            schedulerIds.Add(userName);
        }
        SocioliteUser user1 = new SocioliteUser();
        user1.Name = "user1";
        SocioliteUser user2 = new SocioliteUser();
        user2.Name = "user2";
        SocioliteUser user3 = new SocioliteUser();
        user3.Name = "user3";
        SocioliteUser user4 = new SocioliteUser();
        user4.Name = "user4";
        SocioliteUser user5 = new SocioliteUser();
        user5.Name = "user5";
        SessionContext.AddTeam(new SocioliteTeam
            {
                Id = ("" + SessionContext.GetTeams().Count()),
                Name = "Team " + SessionContext.GetTeams().Count(),
                Members = new List<SocioliteUser> { user1, user2 , user3, user4, user5},
                RecurranceString = "01010100330",
                CustomDiscussions = new List<SocioliteDiscussion>(),
                CustomPolls = new List<SociolitePoll>(),
                ManagerIds = managerIds,
                SchedulerIds = schedulerIds,
                ActivityIsActive = (SessionContext.GetTeams().Count() % 2 == 0)
            });
    }

    protected void RemoveTeams()
    {
        SessionContext.ClearTeams();
    }

    protected void GoToTeams()
    {
        SessionContext.SetWindow("teams");
    }

    protected void GoToActivities()
    {
        SessionContext.SetWindow("activities");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            isInTeams = await MicrosoftTeams.IsInTeams();

            if (isInTeams)
            { 
                var user = await teamsUserCredential.GetUserInfoAsync();
                userName = user.DisplayName;
            }
            else
            {
                errorMessage = "Not running in Microsoft Teams.";
            }

            isLoading = false;


            List<MSTTeam> mstteams = await GetSocioliteTeamsAsync(GetGraphServiceClient());

            mstteams = GetOnlyTeamsWithBotConnectedChannel(mstteams);

            SessionContext.AddMSTTeams(mstteams);

            StateHasChanged();            

            // First time user tries, they are not tied to bot
            // Bot will make table in API with channel ID
            // If no team is found for user, run method to match against channel IDs
        }
    }

    private List<MSTTeam> GetOnlyTeamsWithBotConnectedChannel(List<MSTTeam> joinedTeams)
    {
        // The list below will be retrieved from API
        List<string> socioliteChannelIds = new List<string> { "19:5d175fc71c154b1dbde3b8ee066c5131@thread.tacv2" };

        // We only get those where a channel ID from the list is present
        List<MSTTeam> socioliteTeams = new List<MSTTeam>();

        // We go through each team in joinedTeams
        foreach (var team in joinedTeams) {
            // We go through each of their channels
            foreach (var channelId in team.ChannelIds) {
                if (socioliteChannelIds.Contains(channelId)) {
                    socioliteTeams.Add(team);
                    break;
                }
            }
        }

        return socioliteTeams;
    }

    private async Task<List<MSTTeam>> GetSocioliteTeamsAsync(GraphServiceClient graph)
    {
        // The bot can only access the channel ID, so we need to get the joined teams, and then compare with the channels to get a match
        // We get the joined teams for the user
        var joinedTeams = await graph.Me.JoinedTeams.Request().GetAsync();

        List<MSTTeam> mstteams = new List<MSTTeam>();

        foreach (var team in joinedTeams) {
            MSTTeam mstteam = new MSTTeam();
            mstteam.Id = team.Id;

            // We get the channels
            mstteam.ChannelIds = new List<string>();
            var channels = await graph.Teams[team.Id].Channels.Request().GetAsync();
            foreach (var channel in channels)
            {
                mstteam.ChannelIds.Add(channel.Id);
            }

            // We get the members
            mstteam.MemberIds = new List<string>();
            var members = await graph.Teams[team.Id].Members.Request().GetAsync();
            foreach (var member in members)
            {
                mstteam.MemberIds.Add(member.Id);
            }
            mstteams.Add(mstteam);
        }

        return mstteams;
    }

        private GraphServiceClient GetGraphServiceClient()
    {
        var msGraphAuthProvider = new MsGraphAuthProvider(teamsUserCredential, "TeamMember.Read.All");
        var client = new GraphServiceClient(msGraphAuthProvider);

        return client;
    }

    private async Task<string> GetMembersAsync(GraphServiceClient graph)
    {

     var members = await graph.Teams["d74f1165-c907-4400-9439-77e8a97f5d33"].Members
	.Request()
	.GetAsync();

                var sb = new StringBuilder();
            foreach (var member in members)
            {
                sb.AppendFormat(
                    "Id = {0}, DisplayName = {1}",
                    member.Id, member.DisplayName);

                sb.AppendLine();
            }

        return sb.ToString();
    }   

        private async Task<string> GetJoinedTeamsAsync(GraphServiceClient graph)
    {

   var joinedTeams = await graph.Me.JoinedTeams // Then compare these with the ones in API -> the ones that are on both, are Sociolite teams
	.Request()
	.GetAsync();

                var sb = new StringBuilder();
            foreach (var team in joinedTeams)
            {
                sb.AppendFormat(
                    "Id = {0}, DisplayName = {1}",
                    team.Id, team.DisplayName);

                sb.AppendLine();
            }

        return sb.ToString();
    }   

    private async Task<string> GetChannelsAsync(GraphServiceClient graph)
    {

        var joinedTeams = await graph.Teams["d74f1165-c907-4400-9439-77e8a97f5d33"].Channels
    .Request()
    .GetAsync();

        var sb = new StringBuilder();
        foreach (var team in joinedTeams)
        {
            sb.AppendFormat(
                "Id = {0}, DisplayName = {1}",
                team.Id, team.DisplayName);

            sb.AppendLine();
        }

        return sb.ToString();
    }

            private async Task<string> GetUserPhotoAsync(GraphServiceClient graph)
    {
        // FIND A WAY TO GET THE ID FROM THE APP
        // THE ONE BELOW IS TAKEN FROM https://portal.azure.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/b01a4fad-ab00-4f95-8d47-db20fa333786
        // As "object id" - find a way to get this somehow
        string userPhoto = "";

        var members = await graph.Users["b01a4fad-ab00-4f95-8d47-db20fa333786"].Photo.Content.Request().GetAsync();

     if (members != null)
        {
            // Copy the photo stream to a memory stream
            // to get the bytes out of it
            var memoryStream = new MemoryStream();
            members.CopyTo(memoryStream);
            var photoBytes = memoryStream.ToArray();

            // Generate a data URI for the photo
            userPhoto = $"data:image/png;base64,{Convert.ToBase64String(photoBytes)}";
        }

        return userPhoto;
    }   
}



