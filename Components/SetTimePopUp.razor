@using Sociolite.Models
@using System.Text

<div hidden="@Hide" class="card m-2" style="background-color: rgba(25, 25, 25, .5); position: fixed; z-index: 10; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 100%; height: 100%;">
    <div style="background-color: white; position: fixed; z-index: 10; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 40%">
        <div style="display: flex;">
            <div style="background-color: mediumpurple; color: white; width: -webkit-fill-available;">Change time</div>
            <button style="background-color: indianred; color: white; width: 50px;" @onclick="HidePopUp">x</button>
        </div>
        <div>Activities occur for team '@Team.Name' at:</div>
        <div>
            <select id="times" name="timeList" form="timeForm" @bind="@OccurAtTime">
                @foreach (var time in TimesStrings)
                {
                    <option value="@time">@time</option>
                }
            </select>
        </div>
        <div>On the following days:</div>

        @foreach (var check in CheckBoxList())
        {
            <input class="custom-checkbox" type="checkbox" @onchange="eventArgs => { CheckboxClicked(check, eventArgs.Value); }" />
            @check
            <br />
        }

        <br />
        <div><button @onclick="DisplayStatus">Save</button></div>
        <div><button @onclick="HidePopUp">Cancel</button></div>
        <div>@recurranceString</div>
    </div>
    <MessagePopUp Header=@StatusHeader Message=@StatusMessage Hide=@HideStatusPopUp></MessagePopUp>
</div>

@code {

    [Parameter]
    public SocioliteTeam Team { get; set; }

    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public bool Hide { get; set; }

    public string OccurAtTime = "00:00";

    public bool HideStatusPopUp = true;

    public string StatusHeader = "testhest1";

    public string StatusMessage = "testhest2";

    public string recurranceString = "test";

    public List<string> TimesStrings { get; set; } = new List<string>();

    public List<int> TimesInts { get; set; } = new List<int>();

    public List<string> CheckBox { get; set; } = new List<string>();
    void CheckboxClicked(string CheckID, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!CheckBox.Contains(CheckID))
            {
                CheckBox.Add(CheckID);
            }
        }
        else
        {
            if (CheckBox.Contains(CheckID))
            {
                CheckBox.Remove(CheckID);
            }
        }
    }

    public List<String> CheckBoxList()
    {
        List<String> checkBox = new List<String>();
        checkBox.Add("Monday");
        checkBox.Add("Tuesday");
        checkBox.Add("Wednesday");
        checkBox.Add("Thursday");
        checkBox.Add("Friday");
        checkBox.Add("Saturday");
        checkBox.Add("Sunday");

        return checkBox;
    }

    protected override void OnInitialized()
    {
        // Set CheckBox values based on string

        // Set OccurAtTime value based on string

        // Find a way to read recurrencestring and convert to/from

        SetTimeLists();
    }

    public void HidePopUp()
    {
        Hide = true;
    }

    public void DisplayStatus()
    { // This only shows up the first time
        BuildRecurranceString();

        StatusHeader = "Change time";
        StatusMessage = "Time succesfully changed!";

        HideStatusPopUp = false;
    }

    protected void TimeChanged(ChangeEventArgs e)
    {
        Console.WriteLine(e.Value.ToString());    
    }

    protected string GetReadableTime(int minutes)
    {
        var result = TimeSpan.FromMinutes(minutes);
        var hrs = (int)result.TotalHours;
        var mins = (int)result.Minutes;

        string hrsString = "" + hrs;
        string minsString = "" + mins;

        if (hrs < 10) {
            hrsString = "0" + hrsString;
        }

        if (mins < 10)
        {
            minsString = "0" + minsString;
        }

        return hrsString + ":" + minsString;
    }

    protected void SetTimeLists()
    {
        for (int i = 0; i < 1430; i = i + 30) {
            string timeString = GetReadableTime(i);
            TimesStrings.Add(timeString);
            TimesInts.Add(Int32.Parse(timeString.Replace(":", "")));
        }
    }

    protected void BuildRecurranceString()
    {
        Dictionary<string, int> Days = new Dictionary<string, int>()
                {
                    ["Monday"] = 0,
                    ["Tuesday"] = 1,
                    ["Wednesday"] = 2,
                    ["Thursday"] = 3,
                    ["Friday"] = 4,
                    ["Saturday"] = 5,
                    ["Sunday"] = 6
                };

        string temp = "0000000";

        foreach (var i in CheckBox)
        {
            StringBuilder sb = new StringBuilder(temp);
            sb[Days[i]] = '1';
            temp = sb.ToString();
        }

        temp = temp + OccurAtTime.Replace(":", "");

        recurranceString = temp;
    }

}