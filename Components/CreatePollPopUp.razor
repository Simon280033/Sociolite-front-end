@using Sociolite.Models
@inject List<SociolitePoll> PollsToAdd

<div hidden="@Hide" class="card m-2" style="background-color: rgba(25, 25, 25, .5); position: fixed; z-index: 10; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 100%; height: 100%;">
    <div style="background-color: white; position: fixed; z-index: 10; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 40%">
        <div style="display: flex;">
            <div style="background-color: mediumpurple; color: white; width: -webkit-fill-available;">Create custom poll</div>
            <button style="background-color: indianred; color: white; width: 50px;" @onclick="HidePopUp">x</button>
        </div>
        <div>
            Use team member names as answers: <input class="custom-checkbox" type="checkbox" @onchange="NamesAsAnswersCheckboxChange"/>
        </div>
        <div>
            <span>Poll question:</span>
            <input type="text" id="newtopic" name="newtopic" placeholder="Poll question..." @bind=(PollToCreate.Question)>
        </div>
        <div disabled="@NamesChecked">
            <span>Answer to add:</span>
            <input type="text" id="newanswer" name="newanswer" placeholder="Poll answer..." @bind=(AnswerToAdd)>
            <div><button @onclick="AddAnswer" disabled="@(AnswerToAdd.Length < 1)">Add answer</button></div>
        </div>
        <div>Answers:</div>
        <div style="display: flex; flex-wrap: wrap; align-items: center; justify-content: center;">
            <div style="overflow: scroll; height: 200px;">
                @foreach (var answer in PollToCreate.Answers)
                {
                    <br />
                    <div style="margin: 5px; background-color: cornflowerblue;">
                        <div style="text-align: left">
                            <div>@answer</div>
                        </div>
                        <button @onclick="() => RemoveAnswer(answer)" disabled="@NamesChecked">x</button>
                    </div>
                }
            </div>
        </div>
        <br />
        <div>
            <br />
            <div><button @onclick="AddToScoped" disabled="@Validated()">Add new poll</button></div>
            <div><button @onclick="HidePopUp">Cancel</button></div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public SocioliteTeam Team { get; set; }

    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public bool Hide { get; set; }

    [Parameter] public EventCallback<SociolitePoll> OnClick { get; set; }

    SociolitePoll PollToCreate = new SociolitePoll();

    List<string> TempAnswers = new List<string>();

    public string AnswerToAdd = "";

    public bool NamesChecked = false;

    protected override void OnInitialized()
    {
        PollToCreate.Question = "";
        PollToCreate.Answers = new List<string>();
    }

    public void HidePopUp()
    {
        Hide = true;
    }

    protected void RemoveAnswer(string answer)
    {
        PollToCreate.Answers.Remove(answer);
    }

    protected void NamesAsAnswersCheckboxChange(ChangeEventArgs e)
    {
        if ((bool) e.Value) {
            SetNamesAsAnswers();
            NamesChecked = true;
        } else {
            UnsetNamesAsAnswers();
            NamesChecked = false;
        }
    }

    protected void SetNamesAsAnswers()
    {
        TempAnswers = PollToCreate.Answers;
        PollToCreate.Answers = new List<string>();

        foreach(var member in Team.Members) {
            PollToCreate.Answers.Add(member.Name);
        }
    }

    protected void UnsetNamesAsAnswers()
    {
        PollToCreate.Answers = TempAnswers;
    }

    protected void AddAnswer()
    {
        if (AnswerToAdd.Length > 0) {
            PollToCreate.Answers.Add(AnswerToAdd);
            AnswerToAdd = "";
        }
    }

    protected void AddToScoped()
    {
        OnClick.InvokeAsync(PollToCreate);
        HidePopUp();
    }

    protected bool Validated()
    {
        return !(PollToCreate.Question.Length > 0 && PollToCreate.Answers.Count > 0);
    }
}