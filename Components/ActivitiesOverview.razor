@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using Sociolite.Data
@using Sociolite.Models
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager
@inject IDAO DAO
@inject ISessionContext SessionContext

@if (isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <FluentProgressRing />
    </div>
}
else
{
    <div>@Teams.Count()</div>

    <h1 class="center">Activities for my teams</h1>
    <div class="center">
        <select @onchange="DoStuff">
            <option value="@defaultChoice">@defaultChoice</option>
            @if (Teams != null)
            {
                @foreach (var team in Teams)
                {
                    <option value="@team.Name">@team.Name</option>
                }
            }
        </select>
    </div>

    <div class="center">
        <div class="col-lg-4 mb-2 center" style="display: flex; flex-wrap: wrap; align-items: center; justify-content: center; padding-left: 20%; padding-right: 20%;">
            @foreach (var team in TeamsToDisplay)
            {
                <ActivityCard Team=@team UserId=@userName></ActivityCard>
            }
        </div>
    </div>

    // Make cards for activities
    // Make an onchange listener on select, and re-render cards when new value is selected
}

@code {
    string userName;
    string errorMessage;
    string contactsString;
    bool isInTeams;
    bool isLoading = true;

    string defaultChoice = "No teams";
    string teamChoice = "No teams";

    List<SocioliteTeam> Teams = new List<SocioliteTeam>();

    List<SocioliteTeam> TeamsToDisplay = new List<SocioliteTeam>();

    protected override void OnInitialized()
    {
        Teams = SessionContext.GetTeams();
        if (Teams.Any()) {
            defaultChoice = "All joined teams";
        }
        teamChoice = defaultChoice;
        SetTeamsToShow(teamChoice);
    }

    protected void DoStuff(ChangeEventArgs e)
    {
        string SelectedString = e.Value.ToString();
        teamChoice = SelectedString;

        SetTeamsToShow(SelectedString);

        StateHasChanged();
    }

    protected void SetTeamsToShow(string SelectChoice) {
        if (SelectChoice.Equals("All joined teams"))
        {
            TeamsToDisplay = Teams;
        }
        else if (SelectChoice.Equals("No teams"))
        {
            TeamsToDisplay = new List<SocioliteTeam>();
        } else {
            foreach (SocioliteTeam team in Teams)
            {
                if (team.Name.Equals(SelectChoice)) { // Make this use ID instead...
                    List<SocioliteTeam> NewTeamsList = new List<SocioliteTeam>();
                    NewTeamsList.Add(team);
                    TeamsToDisplay = NewTeamsList;
                    break;
                }
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            isInTeams = await MicrosoftTeams.IsInTeams();

            if (isInTeams)
            {
                var user = await teamsUserCredential.GetUserInfoAsync();
                userName = user.DisplayName;
            }
            else
            {
                errorMessage = "Not running in Microsoft Teams.";
            }

            isLoading = false;
            StateHasChanged();
        }

        //Teams = SessionContext.GetTeams();
    }

    private string GetEnvironmentName()
    {
        return HostEnvironment.IsDevelopment() ? "local environment" : "Azure environment";
    }

    private void Refresh()
    {
        StateHasChanged();
    }
}

