@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using Sociolite.Data
@using Sociolite.Models
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager
@inject IDAO DAO
@inject ISessionContext SessionContext

@if(isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
		<FluentProgressRing/>
	</div>
}
else
{
    <button @onclick="Refresh">Refresh</button>

    <h1 class="center">Sociolite teams</h1>
    <div class="center">Joined teams: @SessionContext.GetTeams().Count()</div>
    <div class="center">
        <div class="col-lg-4 mb-2 center" style="display: flex; flex-wrap: wrap; align-items: center; justify-content: center; padding-left: 20%; padding-right: 20%;">
        @foreach (var team in SessionContext.GetTeams())
   {
                <TeamCard Team=@team MSTTeam="@SessionContext.GetMSTTeams()[0]" UserId=@userName></TeamCard>
   }
        </div>
    </div>
}

@code {
    string userName;
    string errorMessage;
    string contactsString;
    bool isInTeams;
    bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            isInTeams = await MicrosoftTeams.IsInTeams();

            if (isInTeams)
            { 
                var user = await teamsUserCredential.GetUserInfoAsync();
                userName = user.DisplayName;
            }
            else
            {
                errorMessage = "Not running in Microsoft Teams.";
            }

            isLoading = false;
            StateHasChanged();            
        }
    }

    private string GetEnvironmentName()
    {
        return HostEnvironment.IsDevelopment() ? "local environment" : "Azure environment";
    }

    private void Refresh() 
    {
        StateHasChanged();
    }
}

